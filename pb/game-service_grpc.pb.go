// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/game-service.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartGame(ctx context.Context, opts ...grpc.CallOption) (Game_StartGameClient, error)
	GetScoreBoard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ScoreBoard, error)
	SendSampleImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Logo, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/guessthelogo.Game/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) StartGame(ctx context.Context, opts ...grpc.CallOption) (Game_StartGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], "/guessthelogo.Game/StartGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameStartGameClient{stream}
	return x, nil
}

type Game_StartGameClient interface {
	Send(*UserAction) error
	Recv() (*GameStatus, error)
	grpc.ClientStream
}

type gameStartGameClient struct {
	grpc.ClientStream
}

func (x *gameStartGameClient) Send(m *UserAction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameStartGameClient) Recv() (*GameStatus, error) {
	m := new(GameStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) GetScoreBoard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ScoreBoard, error) {
	out := new(ScoreBoard)
	err := c.cc.Invoke(ctx, "/guessthelogo.Game/GetScoreBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SendSampleImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Logo, error) {
	out := new(Logo)
	err := c.cc.Invoke(ctx, "/guessthelogo.Game/SendSampleImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*empty.Empty, error)
	StartGame(Game_StartGameServer) error
	GetScoreBoard(context.Context, *empty.Empty) (*ScoreBoard, error)
	SendSampleImage(context.Context, *empty.Empty) (*Logo, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) CreateUser(context.Context, *CreateUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGameServer) StartGame(Game_StartGameServer) error {
	return status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameServer) GetScoreBoard(context.Context, *empty.Empty) (*ScoreBoard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreBoard not implemented")
}
func (UnimplementedGameServer) SendSampleImage(context.Context, *empty.Empty) (*Logo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSampleImage not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guessthelogo.Game/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_StartGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).StartGame(&gameStartGameServer{stream})
}

type Game_StartGameServer interface {
	Send(*GameStatus) error
	Recv() (*UserAction, error)
	grpc.ServerStream
}

type gameStartGameServer struct {
	grpc.ServerStream
}

func (x *gameStartGameServer) Send(m *GameStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameStartGameServer) Recv() (*UserAction, error) {
	m := new(UserAction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Game_GetScoreBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetScoreBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guessthelogo.Game/GetScoreBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetScoreBoard(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SendSampleImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SendSampleImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guessthelogo.Game/SendSampleImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SendSampleImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guessthelogo.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Game_CreateUser_Handler,
		},
		{
			MethodName: "GetScoreBoard",
			Handler:    _Game_GetScoreBoard_Handler,
		},
		{
			MethodName: "SendSampleImage",
			Handler:    _Game_SendSampleImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartGame",
			Handler:       _Game_StartGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/game-service.proto",
}
